import numpy as np
import pandas as pd
from sklearn.metrics import mean_squared_error as mse
from sklearn.metrics import accuracy_score as acc


from google.colab import files
upload = files.upload()


class BreastCancerNN:
    def __init__(self):
        self.file = pd.read_csv('cancer_.csv')
        self.data = self.file.to_numpy()
        self.inputs = self.data[:, :9]
        self.outputs = self.data[:, 9]
        self.per_list = np.random.permutation(len(self.data))
        self.min_vec = None
        self.max_vec = None
        self.X_train = None
        self.Y_train = None
        self.X_val = None
        self.Y_val = None
        self.w1 = None
        self.w2 = None
        self.w3 = None

    def load_data(self):
        """Load and preprocess data"""
        self.inputs_sh = np.array([self.inputs[i] for i in self.per_list])
        self.outputs_sh = np.array([self.outputs[i] for i in self.per_list])

        self.min_vec = self.inputs_sh.min(axis=0)
        self.max_vec = self.inputs_sh.max(axis=0)
        self.inputs_sh = (self.inputs_sh - self.min_vec) / (self.max_vec - self.min_vec)

        trn_test_split = int(0.75 * len(self.inputs_sh))
        self.X_train = self.inputs_sh[0:trn_test_split, :]
        self.Y_train = self.outputs_sh[0:trn_test_split]

        self.X_val = self.inputs_sh[trn_test_split:, :]
        self.Y_val = self.outputs_sh[trn_test_split:]

    def initialize_weights(self):
        """Initialize weights for the neural network"""
        self.w1 = np.random.uniform(low=-10, high=+10, size=(8, 9))
        self.w2 = np.random.uniform(low=-10, high=+10, size=(4, 8))
        self.w3 = np.random.uniform(low=-10, high=+10, size=(1, 4))

    def activation(self, x):
        """Activation function"""
        return 1 / (1 + np.exp(-1 * x))

    def feedforward(self, input_net):
        """Feedforward algorithm"""
        x1 = np.dot(input_net, self.w1.T)
        y1 = self.activation(x1)
        x2 = np.dot(y1, self.w2.T)
        y2 = self.activation(x2)
        x3 = np.dot(y2, self.w3.T)
        y3 = self.activation(x3)

        return y1, y2, y3

    def d_activation(self, out):
        """Derivative of activation function"""
        return out * (1 - out)

    def train(self, epochs=500, lr=0.01):
        """Train the neural network"""
        self.initialize_weights()

        List_AccTrain = []
        List_MseTrain = []
        List_AccValid = []
        List_MseValid = []

        for i in range(epochs):
            for j in range(len(self.X_train)):
                input = self.X_train[j]
                input = np.reshape(input, newshape=(1, 9))
                target = self.Y_train[j]

                y1, y2, y3 = self.feedforward(input)
                error = target - y3

                d_f3 = self.d_activation(y3)
                d_f2 = self.d_activation(y2)
                diag_d_f2 = np.diagflat(d_f2)
                d_f1 = self.d_activation(y1)
                diag_d_f1 = np.diagflat(d_f1)

                temp1 = -2 * error * d_f3
                temp2 = np.dot(temp1, self.w3)
                temp3 = np.dot(temp2, diag_d_f2)
                temp4 = np.dot(temp3, self.w2)
                temp5 = np.dot(temp4, diag_d_f1)
                temp5 = temp5.T
                temp6 = np.dot(temp5, input)

                self.w1 = self.w1 - lr * temp6
                w2 = self.w2 - lr * np.dot(temp3.T, y1)
                self.w3 = self.w3 - lr * np.dot(temp1.T, y2)

            # mse caculate and training
            Netoutput_Train = []
            target_Train = []
            rnd_Netoutput_Train = []
            for idx in range(len(self.X_train)):
                input = self.X_train[idx]
                target = self.Y_train[idx]
                target_Train.append(target)

                _, _, pred = self.feedforward(input)
                Netoutput_Train.append(pred)
                rnd_Netoutput_Train.append(np.round(pred))

            mse_Train = mse(target_Train, Netoutput_Train)
            List_MseTrain.append(mse_Train)
            acc_Train = acc(target_Train, rnd_Netoutput_Train)
            List_AccTrain.append(acc_Train)
            print(f'epoch {i} : MSE_Train = {mse_Train}, Acc_Train = {acc_Train}')

            Netoutput_val = []
            target_val = []
            rnd_Netoutput_val = []
            for idx in range(len(self.X_val)):
                input = self.X_val[idx]
                target = self.Y_val[idx]
                target_val.append(target)

                _, _, pred = self.feedforward(input)
                Netoutput_val.append(pred)
                rnd_Netoutput_val.append(np.round(pred))

            mse_val = mse(target_val, Netoutput_val)
            List_MseValid.append(mse_val)
            acc_val = acc(target_val, rnd_Netoutput_val)
            List_AccValid.append(acc_val)
            print(f'epoch {i} : MSE_val = {mse_val}, Acc_val = {acc_val}')
            


if __name__ == '__main__':
    nn = BreastCancerNN()
    nn.load_data()
    nn.train()
